from qdrant_client import QdrantClient
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_qdrant import Qdrant
from .config import settings
from app.core.embeddings import embeddings
# –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ Qdrant
client = QdrantClient(url=settings.QDRANT_URL)

# –°–ø–ª–∏—Ç—Ç–µ—Ä –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
splitter = RecursiveCharacterTextSplitter(
    chunk_size=settings.CHUNK_SIZE,
    chunk_overlap=settings.CHUNK_OVERLAP
)

# OpenAI embeddings

# –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
vectorstore = Qdrant(
    client=client,
    collection_name=settings.QDRANT_COLLECTION,
    embeddings=embeddings,
)


def ensure_collection_exists():
    # –ª–µ–Ω–∏–≤–æ —Å–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –≤—ã–∑–æ–≤–æ–º .from_documents –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–µ
    pass


def index_documents(docs):
    # helper: —á–∞–Ω–∫—É–µ–º –∏ –∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º
    splits = splitter.split_documents(docs)
    Qdrant.from_documents(
        documents=splits,
        embedding=embeddings,
        url=settings.QDRANT_URL,
        prefer_grpc=False,
        collection_name=settings.QDRANT_COLLECTION,
    )


def index_title(docs):
    splits = splitter.split_documents(docs)
    Qdrant.from_documents(
        documents=splits,
        embedding=embeddings,
        url=settings.QDRANT_URL,
        prefer_grpc=False,
        collection_name=settings.QDRANT_TITLE_COLLECTION,  # üëà –¥—Ä—É–≥–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è
    )


def get_title_retriever(k: int | None = None):
    title_vectorstore = Qdrant(
        client=client,
        collection_name=settings.QDRANT_TITLE_COLLECTION,
        embeddings=embeddings,
    )
    return title_vectorstore.as_retriever(search_kwargs={"k": k or settings.TOP_K})


def get_retriever(k: int | None = None):
    return vectorstore.as_retriever(search_kwargs={"k": k or settings.TOP_K})


def get_book_retriever():
    title_vectorstore = Qdrant(
        client=client,
        collection_name=settings.QDRANT_TITLE_COLLECTION,
        embeddings=embeddings,
    )
    return title_vectorstore.as_retriever(
        search_type="similarity_score_threshold",
        search_kwargs={
            "score_threshold": 0.6,
            "k": 1000  # –º–∞–∫—Å–∏–º—É–º
        }
    )

