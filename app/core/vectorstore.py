# from qdrant_client import QdrantClient
# from langchain_text_splitters import RecursiveCharacterTextSplitter
# from langchain_qdrant import Qdrant
# from .config import settings
# from .embeddings import embeddings
from qdrant_client import QdrantClient
from langchain_text_splitters import RecursiveCharacterTextSplitter
from langchain_qdrant import Qdrant
from .config import settings
from .embeddings import embeddings

client = QdrantClient(
    url=settings.QDRANT_URL,
    prefer_grpc=True,  # ‚ö° –ò—Å–ø–æ–ª—å–∑—É–µ–º gRPC –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
)

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ø–ª–∏—Ç—Ç–µ—Ä
splitter = RecursiveCharacterTextSplitter(
    chunk_size=settings.CHUNK_SIZE or 1000,
    chunk_overlap=settings.CHUNK_OVERLAP or 100
)

vectorstore = Qdrant(
    client=client,
    collection_name=settings.QDRANT_COLLECTION,
    embeddings=embeddings,
)


def index_documents(docs, batch_size: int = 64):
    """–ß–∞–Ω–∫—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é Qdrant —Å –±–∞—Ç—á–∏–Ω–≥–æ–º –∏ gRPC"""
    splits = splitter.split_documents(docs)
    print(f"üìö –î–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ—Å–ª–µ split: {len(splits)}")

    total = len(splits)
    for i in range(0, total, batch_size):
        batch = splits[i : i + batch_size]
        vectorstore.add_documents(batch)
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {min(i+batch_size, total)} / {total} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")


def get_retriever(k: int | None = None):
    return vectorstore.as_retriever(search_kwargs={"k": k or settings.TOP_K})


def get_book_retriever(k: int | None = None):
    return vectorstore.as_retriever(search_kwargs={"k": k or settings.TOP_K})
