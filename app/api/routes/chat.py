from fastapi import APIRouter, Depends
from pydantic import BaseModel
from fastapi.responses import JSONResponse

from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnableParallel, RunnablePassthrough
from langchain_core.tools import tool

from ...deps import get_retriever_dep, get_llm, get_book_retriever_dep
router = APIRouter(prefix="/api", tags=["chat"])


class ChatRequest(BaseModel):
    query: str
    k: int | None = None


def _format_docs(docs, per_chunk_chars=800, max_chunks=5):
    lines = []
    for d in docs[:max_chunks]:
        m = d.metadata or {}
        title = m.get("title", "–∫–Ω–∏–≥–∞")
        # author = m.get("author", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        # subject = m.get("subject")
        page = m.get("page", "?")
        text = (d.page_content or "")[:per_chunk_chars].strip()
        lines.append(f"[{title}, —Å—Ç—Ä. {page}] {text}")
    print("\n\n".join(lines))
    return "\n\n".join(lines)


# ---- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ----
@tool("vector_search", return_direct=False)
def vector_search(query: str, k: int = 5, retriever=None) -> str:
    """
    –ü–æ–∏—Å–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Å–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    print("–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
    if retriever is None:
        return "Retriever –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"
    docs = retriever.invoke(query, config={"k": k})
    return _format_docs(docs)


def _format_books(docs, max_items=None):
    lines = []
    limit = max_items or len(docs)   # –µ—Å–ª–∏ None ‚Üí –±–µ—Ä–µ–º –≤—Å–µ
    for d in docs[:limit]:
        m = d.metadata or {}
        title = m.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞")
        subject = m.get("subject", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

        lines.append(f"üìò {title}\n–î–æ–ø. –∏–Ω—Ñ–æ: {subject}")
    return "\n\n".join(lines)


@tool("book_search")
def book_search(query: str, k: int = 50, retriever=None) -> str:
    """
    –û–±–∑–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–Ω–∏–≥–∞–º (—ç–º–±–µ–¥–¥–∏–Ω–≥–∏).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–Ω–∏–≥ (–º–Ω–æ–≥–æ).
    """
    print("–û–±–∑–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
    if retriever is None:
        return "Retriever –¥–ª—è –∫–Ω–∏–≥ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"

    docs = retriever.invoke(query, config={"k": k})
    return _format_books(docs, max_items=k)


@router.post("/chat", summary="–ß–∞—Ç —Å –ò–ò")
async def chat(req: ChatRequest,
               retriever=Depends(get_retriever_dep),          # —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã (–∫–æ–Ω—Ç–µ–∫—Å—Ç)
               book_retriever=Depends(get_book_retriever_dep),# –∫–Ω–∏–≥–∏ (–æ–±–∑–æ—Ä)
               llm=Depends(get_llm)):

    try:
        # –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        vs_tool = lambda q, k=5: vector_search.func(q, k, retriever=retriever)
        bs_tool = lambda q, k=30: book_search.func(q, k, retriever=book_retriever)

        prompt = ChatPromptTemplate.from_messages([
            ("system",
             "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ –¢—É—Ä–∞–Ω-–ê—Å—Ç–∞–Ω–∞. "
             "–ò—Å–ø–æ–ª—å–∑—É–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Å—Ç—É–¥–µ–Ω—Ç–æ–≤. "
             "–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç ‚Äî —Å–∫–∞–∂–∏ –æ–± —ç—Ç–æ–º. –û—Ç–≤–µ—Ç—ã –≤–æ–∑–≤—Ä–∞—â–∞–π –≤ html —Ñ–æ—Ä–º–∞—Ç–µ"
             "–ö–Ω–∏–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞."),
            ("human", "–í–æ–ø—Ä–æ—Å: {question}\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–ö–Ω–∏–≥–∏:\n{books}")
        ])

        chain = (
                RunnableParallel(
                    question=RunnablePassthrough(),
                    context=lambda x: vs_tool(x, req.k or 5),  # –ø–æ–∏—Å–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤
                    books=lambda x: bs_tool(x, 30),  # –ø–æ–∏—Å–∫ –∫–Ω–∏–≥
                )
                | prompt
                | llm
        )

        answer = chain.invoke(req.query)
        return {"reply": answer.content}

    except Exception as e:
        return JSONResponse({"error": f"Internal error: {e}"}, status_code=500)
