from fastapi import APIRouter, Depends
from pydantic import BaseModel
from fastapi.responses import JSONResponse
import re
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnableParallel, RunnablePassthrough
from langchain_core.tools import tool
from sqlalchemy.orm import Session

import time
from fastapi import HTTPException
from pydantic import BaseModel
from typing import List, Optional
from ...deps import get_retriever_dep, get_llm, get_book_retriever_dep
from app.models.chat import ChatHistory
router = APIRouter(prefix="/api", tags=["chat"])
from app.core.db import SessionLocal
import re


def clean_context(text: str) -> str:
    """
    –£–¥–∞–ª—è–µ—Ç —Ä–∞–∑–¥–µ–ª—ã —Å–æ —Å–ø–∏—Å–∫–∞–º–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏ –≤–Ω–µ—à–Ω–∏–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏
    (–≤–∫–ª—é—á–∞—è '–°–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã', '–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', 'References' –∏ –∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç—ã)
    –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–Ω–∏–≥–∏.
    """
    # –°–Ω–∞—á–∞–ª–∞ –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã (—á—Ç–æ–±—ã '–ª–∏—Ç–µ—Ä –∞—Ç—É—Ä–∞' —Å—Ç–∞–ª–æ '–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞')
    normalized = re.sub(r'\s+', ' ', text)

    # –£–¥–∞–ª—è–µ–º –≤—Å—ë, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ —Ç–∏–ø–∏—á–Ω—ã—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å–ø–∏—Å–∫–æ–≤ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã
    pattern = r'(?i)(—Å–ø–∏—Å–æ–∫\s+—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω–æ–π\s+–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã|—Å–ø–∏—Å–æ–∫\s+–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã|–æ—Å–Ω–æ–≤–Ω–∞—è\s+–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞|–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è\s+–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞|–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞|references)\b.*'
    cleaned = re.sub(pattern, '', normalized)

    return cleaned.strip()


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()


class ChatHistoryItem(BaseModel):
    sessionId: str
    question: str
    answer: str
    tools_used: Optional[List[str]] = []
    timestamp: Optional[float] = None  # UNIX timestamp


def save_chat_history(db: Session, session_id: str, question: str, answer: str, tools_used: list[str]):
    item = ChatHistory(
        session_id=session_id,
        question=question,
        answer=answer,
        tools_used=tools_used,
        timestamp=time.time()
    )
    db.add(item)
    db.commit()
    db.refresh(item)
    return item


class ChatRequest(BaseModel):
    query: str
    k: int | None = None
    sessionId: Optional[str] = None  # –Ω–æ–≤–æ–µ –ø–æ–ª–µ


def _format_docs(docs, per_chunk_chars=800, max_chunks=5):
    lines = []
    for d in docs[:max_chunks]:
        m = d.metadata or {}
        title = m.get("title", "–∫–Ω–∏–≥–∞")
        # author = m.get("author", "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
        # subject = m.get("subject")
        page = m.get("page", "?")
        text = (d.page_content or "")[:per_chunk_chars].strip()
        lines.append(f"[{title}, —Å—Ç—Ä. {page}] {text}")
        print(title, m.get("source"), text)
    return "\n\n".join(lines)


# ---- –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ ----
@tool("vector_search", return_direct=False)
def vector_search(query: str, k: int = 5, retriever=None) -> str:
    """
    –ü–æ–∏—Å–∫ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ –ø–æ —Å–º—ã—Å–ª–æ–≤–æ–º—É —Å—Ö–æ–¥—Å—Ç–≤—É.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∫—É—Å–∫–∏ —Ç–µ–∫—Å—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–Ω–∏–≥–∏, –∞–≤—Ç–æ—Ä–∞ –∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã.
    """
    print("–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
    if retriever is None:
        return "Retriever –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"
    docs = retriever.invoke(query, config={"k": k})
    return _format_docs(docs)


def _format_books(docs, max_items=None):
    lines = []
    limit = max_items or len(docs)   # –µ—Å–ª–∏ None ‚Üí –±–µ—Ä–µ–º –≤—Å–µ
    for d in docs[:limit]:
        m = d.metadata or {}
        title = m.get("title", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–Ω–∏–≥–∞")
        # subject = m.get("subject", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        print(title, m.get("title"), m.get("id_book"))

        lines.append(f"üìò {title}\n")
    return "\n\n".join(lines)


@tool("book_search")
def book_search(query: str, k: int = 50, retriever=None) -> str:
    """
    –û–±–∑–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –∫–Ω–∏–≥–∞–º (—ç–º–±–µ–¥–¥–∏–Ω–≥–∏).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –∫–Ω–∏–≥ (–º–Ω–æ–≥–æ).
    """
    print("–û–±–∑–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
    if retriever is None:
        return "Retriever –¥–ª—è –∫–Ω–∏–≥ –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω"

    docs = retriever.invoke(query, config={"k": k})
    return _format_books(docs, max_items=k)


# –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
# –∫–ª—é—á: sessionId, –∑–Ω–∞—á–µ–Ω–∏–µ: timestamp –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
_last_request_time: dict[str, float] = {}

RATE_LIMIT_SECONDS = 30  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏


@router.post("/chat", summary="–ß–∞—Ç —Å –ò–ò")
async def chat(req: ChatRequest,
               retriever=Depends(get_retriever_dep),
               book_retriever=Depends(get_book_retriever_dep),
               llm=Depends(get_llm),
               db: Session = Depends(get_db)):

    session_id = req.sessionId or "anonymous"

    # –í—ã–ø–æ–ª–Ω—è–µ–º LLM
    vs_tool_used = []
    bs_tool_used = []

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
    now = time.time()
    last_time = _last_request_time.get(session_id, 0)

    if now - last_time < RATE_LIMIT_SECONDS:
        return JSONResponse(
            {"error": f"–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {int(RATE_LIMIT_SECONDS - (now - last_time))} —Å–µ–∫."},
            status_code=429
        )

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    _last_request_time[session_id] = now

    vs_tool = lambda q, k=5: (vs_tool_used.append("vector_search") or vector_search.func(q, k, retriever=retriever))
    bs_tool = lambda q, k=10: (bs_tool_used.append("book_search") or book_search.func(q, k, retriever=book_retriever))

    prompt = ChatPromptTemplate.from_messages([
        (
            "system",
            "–¢—ã ‚Äî –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–∏—Å–∫—É –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ ¬´–¢—É—Ä–∞–Ω-–ê—Å—Ç–∞–Ω–∞¬ª.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –∫–Ω–∏–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–Ω–æ —É–∫–∞–∑–∞–Ω—ã –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–Ω–∏–≥–∏¬ª ‚Äî —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –∫–∞—Ç–∞–ª–æ–≥ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏.\n"
            "–ï—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∫–Ω–∏–≥–∏ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Å–ø–∏—Å–∫–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏–ª–∏ —É–ø–æ–º—è–Ω—É—Ç—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏, **–Ω–µ –ø—Ä–µ–¥–ª–∞–≥–∞–π –∏—Ö** ‚Äî "
            "–æ–Ω–∏ –º–æ–≥—É—Ç –Ω–µ –±—ã—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –±–∏–±–ª–∏–æ—Ç–µ–∫–µ.\n"
            "–û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ö–æ–Ω—Ç–µ–∫—Å—Ç¬ª –∏ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–Ω–∏–≥ –∏–∑ ¬´–ö–Ω–∏–≥–∏¬ª.\n"
            "–ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî —á–µ—Å—Ç–Ω–æ —Å–æ–æ–±—â–∏: "
            "¬´–í –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–∞—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –¢—É—Ä–∞–Ω-–ê—Å—Ç–∞–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç.¬ª\n"
            "–û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –≤ HTML-—Ñ–æ—Ä–º–∞—Ç–µ (<p>, <ul>, <li>, <b>)."
        ),
        (
            "human",
            "–í–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞: {question}\n\n"
            "–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n"
            "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–Ω–∏–≥ (–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞):\n{books}"
        )
    ])

    chain = (
            RunnableParallel(
                question=RunnablePassthrough(),
                context=lambda q: clean_context(vs_tool(q, req.k or 5)),  # –ø—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä —Ç—É—Ç
                books=lambda q: "",  # –æ—Ç–∫–ª—é—á–∞–µ–º book_search
            )
            | prompt
            | llm
    )

    answer = chain.invoke(req.query)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    save_chat_history(
        db=db,
        session_id=session_id,
        question=req.query,
        answer=answer.content,
        tools_used=list(set(vs_tool_used + bs_tool_used))
    )

    return {"reply": answer.content}
