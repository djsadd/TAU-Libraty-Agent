// src/App.tsx
import React, { useEffect, useMemo, useRef, useState } from 'react';
import { createPortal } from 'react-dom';
import DOMPurify from 'dompurify';
import { v4 as uuidv4 } from 'uuid';

const DEFAULT_API = '/api/chat';

type Role = 'user' | 'assistant';
interface Msg {
  role: Role;
  content: string;
  t: number;
  error?: boolean;
  books?: {
    title: string;
    author?: string;
    year?: number;
    cover?: string;
    description?: string;
  }[];
}


// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ HTML –æ—Ç LLM
function Html({ html }: { html: string }) {
  const clean = useMemo(() => {
    let content = html.trim();

    // –£–±–∏—Ä–∞–µ–º –æ–±—ë—Ä—Ç–∫—É ```html –∏–ª–∏ ```plaintext
    content = content
      .replace(/^```(?:html|plaintext)?/i, '')
      .replace(/```$/i, '')
      .trim();

    // –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º –¥–≤–æ–π–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ <p>
    content = content
      .replace(/\n{3,}/g, '\n\n')
      .replace(/\n/g, '<br/>');

    // –°–∞–Ω–∏—Ç–∏–∑–∞—Ü–∏—è
    const purified = DOMPurify.sanitize(content, {
      ALLOWED_TAGS: [
        'b','strong','i','em','u','s','sup','sub',
        'p','br','hr','blockquote','code','pre','span',
        'ul','ol','li','table','thead','tbody','tr','th','td',
        'a','h1','h2','h3','h4','h5','h6'
      ],
      ALLOWED_ATTR: ['href','title','target','rel','colspan','rowspan'],
      FORBID_TAGS: ['img','figure','picture','source'],   // üëà –¥–æ–±–∞–≤–∏–ª–∏
      RETURN_TRUSTED_TYPE: false,
    });


    const tmp = document.createElement('div');
    tmp.innerHTML = purified;
    tmp.querySelectorAll('img, figure, picture, source').forEach(n => n.remove());

    // –°—Å—ã–ª–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ
    tmp.querySelectorAll('a').forEach(a => {
      a.setAttribute('target', '_blank');
      a.setAttribute('rel', 'noopener noreferrer');
    });

    // –¢–∞–±–ª–∏—Ü—ã ‚Äî —Å—Ç–∏–ª–∏–∑—É–µ–º
    tmp.querySelectorAll('table').forEach(tbl => {
      tbl.classList.add('ai-table');
    });

    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ <p> –∏ <br> –≤ –∫–æ–Ω—Ü–µ
    // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ —É–∑–ª—ã –∏ <br> –≤ –Ω–∞—á–∞–ª–µ –∏ –≤ –∫–æ–Ω—Ü–µ
    tmp.innerHTML = tmp.innerHTML
      .replace(/^(\s|<br\s*\/?>|<p>\s*<\/p>|&nbsp;)+/gi, '')
      .replace(/(\s|<br\s*\/?>|<p>\s*<\/p>|&nbsp;)+$/gi, '');


    return tmp.innerHTML;
  }, [html]);

  return <div className="ai-html" dangerouslySetInnerHTML={{ __html: clean }} />;
}
function BookCard({ book, onOpen }: { book: Msg['books'][0]; onOpen: (b: Msg['books'][0]) => void }) {
  return (
    <button
      type="button"
      className="book-card"
      title="–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
      // –í–ê–ñ–ù–û: –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞ mouseup –∏ –≥–∞—Å–∏–º –≤—Å–ø–ª—ã—Ç–∏–µ
      onMouseUp={(e) => { e.stopPropagation(); onOpen(book); }}
    >
      <div className="book-info">
        <div className="book-title">{book.title}</div>
        {book.author && <div className="book-author">–ê–≤—Ç–æ—Ä: {book.author}</div>}
        {book.year && <div className="book-year">{book.year} –≥.</div>}
        {book.description && <div className="book-desc">{book.description}</div>}
      </div>
    </button>
  );
}

function Modal({
  open,
  onClose,
  book,
}: {
  open: boolean;
  onClose: () => void;
  book?: Msg['books'][0];
}) {
  const mountEl = useMemo(() => {
    const el = document.createElement('div');
    el.className = 'modal-portal';
    return el;
  }, []);

  useEffect(() => {
    document.body.appendChild(mountEl);
    return () => { try { document.body.removeChild(mountEl); } catch {} };
  }, [mountEl]);

  useEffect(() => {
    if (!open) return;
    const prev = document.body.style.overflow;
    document.body.style.overflow = 'hidden';
    return () => { document.body.style.overflow = prev; };
  }, [open]);

  const handleOverlayMouseDown = (e: React.MouseEvent<HTMLDivElement>) => {
    if (e.target === e.currentTarget) onClose();
  };

  if (!open || !book) return null;

  return createPortal(
    <div className="modal" onMouseDown={handleOverlayMouseDown}>
      <div
        className="modal-dialog"
        role="dialog"
        aria-modal="true"
        aria-label={book.title}
        // –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ –ú–´–®–ò –Ω–∞ –¥–∏–∞–ª–æ–≥–µ ‚Äî –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç
        onMouseDown={(e) => e.stopPropagation()}
      >
        <div className="modal-header">
          <h3 className="modal-title">{book.title}</h3>
          <button type="button" className="modal-close" onClick={onClose} aria-label="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
        </div>
        <div className="modal-body">
          {book.author && <p><b>–ê–≤—Ç–æ—Ä:</b> {book.author}</p>}
          {book.year && <p><b>–ì–æ–¥:</b> {book.year}</p>}
          {book.description && (<><hr/><p style={{whiteSpace:'pre-wrap'}}>{book.description}</p></>)}
        </div>
        <div className="modal-footer">
          <button type="button" className="btn" onClick={onClose}>–ó–∞–∫—Ä—ã—Ç—å</button>
        </div>
      </div>
    </div>,
    mountEl
  );
}



export default function App(): JSX.Element {
  const [apiUrl, setApiUrl] = useState<string>(DEFAULT_API);
  const [sessionId, setSessionId] = useState<string>('');
  const [k, setK] = useState<number>(() => Number(localStorage.getItem('k')) || 4);
  const [question, setQuestion] = useState<string>('');
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string>('');
const [selected, setSelected] = useState<Msg['books'][0] | undefined>();
  const [messages, setMessages] = useState<Msg[]>(() => {
    const saved = localStorage.getItem('messages');
    return saved ? (JSON.parse(saved) as Msg[]) : [];
  });
  const chatRef = useRef<HTMLDivElement | null>(null);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ sessionId –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const h = (e: KeyboardEvent) => { if (e.key === 'Escape') setSelected(undefined); };
    window.addEventListener('keydown', h);
    return () => window.removeEventListener('keydown', h);
  }, []);

  useEffect(() => {
    let id = sessionStorage.getItem('sessionId');
    if (!id) {
      id = uuidv4();
      sessionStorage.setItem('sessionId', id);
    }
    setSessionId(id);
  }, []);

  // –ú–∏–≥—Ä–∞—Ü–∏—è —Å—Ç–∞—Ä—ã—Ö –∞–±—Å–æ–ª—é—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π apiUrl
  useEffect(() => {
    if (apiUrl.startsWith('http')) {
      const next = DEFAULT_API;
      setApiUrl(next);
      localStorage.setItem('apiUrl', next);
    }
  }, []);

  useEffect(() => { localStorage.setItem('k', String(k)); }, [k]);
  useEffect(() => { localStorage.setItem('messages', JSON.stringify(messages)); }, [messages]);
  useEffect(() => { chatRef.current?.scrollTo({ top: chatRef.current.scrollHeight, behavior: 'smooth' }); }, [messages, loading]);

  const canSend = useMemo(() => question.trim().length > 0 && !loading, [question, loading]);

  async function send(): Promise<void> {
  const q = question.trim();
  if (!q) return;

  setError('');
  setLoading(true);
  setMessages(prev => [...prev, { role: 'user', content: q, t: Date.now() }]);
  setQuestion(''); // –æ—á–∏—â–∞–µ–º –ø–æ–ª–µ

  try {
    const payload = {
      query: q,
      k: Number(k) || 0,
      sessionId,
      context: messages.map(m => ({ role: m.role, content: m.content })).slice(-10) // –Ω–µ–º–Ω–æ–≥–æ –∏—Å—Ç–æ—Ä–∏–∏
    };

    const res = await fetch(apiUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload)
    });

    const data: any = await res.json().catch(() => ({}));
    if (!res.ok) throw new Error(data?.error || `HTTP ${res.status}`);

    // –û—á–∏—Å—Ç–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —à—É–º–æ–≤
    // –û—á–∏—Å—Ç–∏–º –æ—Ç–≤–µ—Ç –æ—Ç —à—É–º–æ–≤
    let reply = String(data?.reply ?? '')
      .replace(/^```(?:html|plaintext)?/i, '')
      .replace(/```$/i, '')
      .replace(/^\s+|\s+$/g, '') // üí° —É–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
      .replace(/^\n+|\n+$/g, '') // üí° –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ —á–∏—Å—Ç–∏–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
      .trim();

    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã –≤–Ω—É—Ç—Ä–∏
    reply = reply.replace(/\n{3,}/g, '\n\n');


    // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    reply = reply.replace(/\n{3,}/g, '\n\n');

        // üí° –ü–æ–∫–∞ API –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–Ω–∏–≥–∏ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–∫-–¥–∞–Ω–Ω—ã–µ
    const mockBooks = [
      {
        title: '–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç. –û—Å–Ω–æ–≤—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∞',
        author: '–ü–∏—Ç–µ—Ä –î—Ä—É–∫–µ—Ä',
        year: 2019,
        cover: 'https://covers.openlibrary.org/b/id/8231991-L.jpg',
        description: '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É.',
        link: '#'
      },
      {
        title: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ KPI',
        author: '–î—ç–≤–∏–¥ –ü–∞—Ä–º–µ–Ω—Ç–µ—Ä',
        year: 2021,
        cover: 'https://covers.openlibrary.org/b/id/8463021-L.jpg',
        description: '–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.',
        link: '#'
      },
    ];

    setMessages(prev => [
      ...prev,
      { role: 'assistant', content: reply, t: Date.now(), books: mockBooks },
    ]);

  } catch (e: unknown) {
    const m = e instanceof Error ? e.message : '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞';
    setError(m);
    setMessages(prev => [...prev, { role: 'assistant', content: `‚ö†Ô∏è ${m}`, t: Date.now(), error: true }]);
  } finally {
    setLoading(false);
  }
}


  function onKeyDown(e: React.KeyboardEvent<HTMLTextAreaElement>): void {
    if ((e.key === 'Enter' || (e as any).keyCode === 13) && !e.shiftKey) {
      e.preventDefault();
      if (canSend) void send();
    }
  }

  function clearChat(): void { setMessages([]); setError(''); }
    return (
  <div className="container">
    <div className="app">
      {/* === HEADER === */}
      <div className="hdr">
        <div className="brand">
          <div className="logo" />
          <div>
            <div className="title">AI –ß–∞—Ç –ø–æ –∫–Ω–∏–≥–∞–º</div>
            <div className="status">
              –ò–ò –º–æ–¥–µ–ª—å: {error ? <span className="pill err">–æ—à–∏–±–∫–∞</span> : <span className="pill ok">–≥–æ—Ç–æ–≤–∞</span>}
            </div>
          </div>
        </div>
        <div className="toolbar">
          <span className="chip">K –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤</span>
          <input
            className="number"
            type="number"
            min={0}
            max={50}
            value={k}
            onChange={e => setK(Number(e.currentTarget.value))}
          />
          <button className="btn" onClick={clearChat} title="–û—á–∏—Å—Ç–∏—Ç—å">–û—á–∏—Å—Ç–∏—Ç—å</button>
        </div>
      </div>

      {/* === CHAT === */}
      <div className="chat" ref={chatRef}>
        {messages.length === 0 && !loading && (
          <div className="group assistant">
            <div className="meta">–ë–æ—Ç ‚Ä¢ {new Date().toLocaleTimeString()}</div>
            <div className="bubble">
              –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –ø–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥. –ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–ì–¥–µ –≤ –∫–Ω–∏–≥–µ –ø–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É –µ—Å—Ç—å –ø—Ä–æ KPI?¬ª
            </div>
          </div>
        )}

        {messages.map((m, i) => (
          <div className={`group ${m.role}`} key={m.t + ':' + i}>
            <div className="meta">{m.role === 'user' ? '–í—ã' : '–ë–æ—Ç'} ‚Ä¢ {new Date(m.t).toLocaleTimeString()}</div>
            <div className={`bubble ${m.error ? 'err' : ''}`}>
              {m.role === 'assistant' ? (
                <>
                  {m.books && m.books.length > 0 && (
                    <div className="book-list">
                      {m.books.map((b, j) => (
                        <BookCard key={j} book={b} onOpen={setSelected} />
                      ))}
                    </div>
                  )}
                  <Html html={m.content} />
                </>
              ) : (
                <pre style={{ whiteSpace: 'pre-wrap', margin: 0 }}>{m.content}</pre>
              )}
            </div>
          </div>
        ))}

        {loading && <div className="skeleton" />}
      </div>

      {/* === INPUT ROW === */}
      <div className="row">
        <textarea
          className="textarea"
          rows={2}
          placeholder="–°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å‚Ä¶ (Enter ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å, Shift+Enter ‚Äî –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏)"
          value={question}
          onChange={e => setQuestion(e.currentTarget.value)}
          onKeyDown={onKeyDown}
        />
        <button className="btn" onClick={() => void send()} disabled={!canSend}>
          {loading ? '–û—Ç–ø—Ä–∞–≤–∫–∞‚Ä¶' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
        </button>
      </div>

      {/* === FOOTER === */}
      <div className="footer">
        <span className="chip">–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏</span>
      </div>
    </div>

    {/* === MODAL === */}
    <Modal open={!!selected} onClose={() => setSelected(undefined)} book={selected} />
  </div>
);
}